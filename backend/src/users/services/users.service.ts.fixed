import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { User, UserRole } from '../entities/user.entity';
import { CreateUserDto, UpdateUserDto } from '../dto/user.dto';

@Injectable()
export class UsersService {
    constructor(
        @InjectRepository(User)
        private usersRepository: Repository<User>,
    ) { }

    async findAll(role?: UserRole): Promise<User[]> {
        if (role) {
            return this.usersRepository.find({
                where: { role }
            });
        }
        return this.usersRepository.find();
    }

    async findOne(id: number): Promise<User> {
        const user = await this.usersRepository.findOne({
            where: { user_id: id },
        });

        if (!user) {
            throw new NotFoundException(`User with ID ${id} not found`);
        }

        return user;
    }

    async findByEmail(email: string): Promise<User> {
        const user = await this.usersRepository.findOne({
            where: { email },
        });

        if (!user) {
            throw new NotFoundException(`User with email ${email} not found`);
        }

        return user;
    }

    async create(createUserDto: CreateUserDto): Promise<User> {
        // Check if email already exists
        const existingUser = await this.usersRepository.findOne({
            where: { email: createUserDto.email },
        });

        if (existingUser) {
            throw new BadRequestException('Email already in use');
        }

        // Hash password
        const salt = await bcrypt.genSalt();
        const password_hash = await bcrypt.hash(createUserDto.password, salt);

        // Create new user
        const user = new User();
        user.name = createUserDto.name;
        user.email = createUserDto.email;
        user.password_hash = password_hash;
        user.role = createUserDto.role || UserRole.STUDENT;
        
        if (createUserDto.phone) {
            user.phone = createUserDto.phone;
        }
        
        if (createUserDto.address) {
            user.address = createUserDto.address;
        }
        
        if (createUserDto.dateOfBirth) {
            user.date_of_birth = new Date(createUserDto.dateOfBirth);
        }
        
        user.is_active = createUserDto.isActive !== undefined ? createUserDto.isActive : true;
        user.email_verified = false;

        return this.usersRepository.save(user);
    }

    async update(id: number, updateUserDto: UpdateUserDto): Promise<User> {
        const user = await this.findOne(id);

        // Update user properties
        if (updateUserDto.name) {
            user.name = updateUserDto.name;
        }

        if (updateUserDto.phone) {
            user.phone = updateUserDto.phone;
        }

        if (updateUserDto.address) {
            user.address = updateUserDto.address;
        }

        if (updateUserDto.dateOfBirth) {
            user.date_of_birth = new Date(updateUserDto.dateOfBirth);
        }

        if (updateUserDto.isActive !== undefined) {
            user.is_active = updateUserDto.isActive;
        }

        return this.usersRepository.save(user);
    }

    async updatePassword(id: number, password: string): Promise<User> {
        const user = await this.findOne(id);

        // Hash password
        const salt = await bcrypt.genSalt();
        const password_hash = await bcrypt.hash(password, salt);

        // Update password
        user.password_hash = password_hash;

        return this.usersRepository.save(user);
    }

    async remove(id: number): Promise<void> {
        const user = await this.findOne(id);
        await this.usersRepository.remove(user);
    }

    async comparePassword(user: User, password: string): Promise<boolean> {
        return bcrypt.compare(password, user.password_hash);
    }

    async updateLastLogin(id: number): Promise<User> {
        const user = await this.findOne(id);
        user.last_login = new Date();
        return this.usersRepository.save(user);
    }

    async validateUserCredentials(email: string, password: string): Promise<User> {
        const user = await this.usersRepository.findOne({
            where: { email },
        });

        if (!user) {
            throw new NotFoundException('Invalid credentials');
        }

        const isPasswordValid = await bcrypt.compare(password, user.password_hash);

        if (!isPasswordValid) {
            throw new BadRequestException('Invalid credentials');
        }

        return user;
    }
}
